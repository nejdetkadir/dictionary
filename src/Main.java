
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.FileChooser;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nejdet Kadir
 */
public class Main extends javax.swing.JFrame {
    
    private ArrayList<Word> wordArrayList = new ArrayList<>();
    //Database
    private String url="jdbc:derby://localhost:1527/dictionary",user="root",password="5313235157";
    //Word Settings
    DefaultTableModel wordSettingsTM;
    String add_error_message;
    String add_success_message;
    String update_error_message;
    String update_success_message;
    String delete_error_message;
    String delete_success_message;
    String must_select_row_message;
    String must_select_image;
    String created_xml_success;
    String import_xml_success;
    int[] selected_row;
    String image_label_text;
    private String imageName,imageURL;
    private File file;
    boolean update_file_status;
    
    //Main Table
    DefaultTableModel mainTB;
    String selected_lang = "EN";
    
    //Error Messages
    String tr_input_empty;
    String tr_input_size;
    String en_input_empty;
    String en_input_size;
    String fr_input_empty;
    String fr_input_size;
    String de_input_empty;
    String de_input_size;
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        
        //Word Settings
        wordSettingsTM = (DefaultTableModel) WordSettingsTable.getModel();
        mainTB = (DefaultTableModel) mainTable.getModel();
        setLanguage();    
        setColor();
        getAndSetData("EN");
        imagePreviewLabel.setText(image_label_text);
        //Methods
        setWordSettingsDataToTable();
        selected_row = WordSettingsTable.getSelectedRows();
    }
    
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        searchTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        searchForLanguageComboBox = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ENTextField = new javax.swing.JTextField();
        FRTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        DETextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TRTextField = new javax.swing.JTextField();
        AddButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        chooseImageButton = new javax.swing.JButton();
        imagePreviewLabel = new javax.swing.JLabel();
        ClearButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        WordSettingsTable = new javax.swing.JTable();
        messageWordSettingsLabel = new javax.swing.JLabel();
        getDataFromExcelButton = new javax.swing.JButton();
        importDataToExcelButton = new javax.swing.JButton();
        jButton_getFirst = new javax.swing.JButton();
        jButton_previous = new javax.swing.JButton();
        jButton_nextTo = new javax.swing.JButton();
        jButton_last = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        languageComboBox = new javax.swing.JComboBox<>();
        setLanguageButton = new javax.swing.JButton();
        appLanguageLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        AppColorTextLabel = new javax.swing.JLabel();
        setColorButton = new javax.swing.JButton();
        jColorChooser1 = new javax.swing.JColorChooser();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        mainTable.setRowHeight(120);
        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TR", "EN", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, javax.swing.ImageIcon.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(mainTable);

        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Search");

        searchForLanguageComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EN", "FR", "DE" }));
        searchForLanguageComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchForLanguageComboBoxÄ°temStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchForLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 120, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(searchForLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Dictionary", jPanel1);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("EN Word ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("FR Word ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("DE Word ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("TR Word ");

        AddButton.setText("ADD");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        UpdateButton.setText("UPDATE");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("DELETE");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        chooseImageButton.setText("resim seÃ§");
        chooseImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImageButtonActionPerformed(evt);
            }
        });

        imagePreviewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagePreviewLabel.setText("Select an image");

        ClearButton.setText("TEMÄ°ZLE");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(28, 28, 28)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(TRTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(FRTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ENTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DETextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(chooseImageButton)
                                .addGap(61, 61, 61)
                                .addComponent(imagePreviewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 123, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(AddButton)
                        .addGap(18, 18, 18)
                        .addComponent(UpdateButton)
                        .addGap(18, 18, 18)
                        .addComponent(DeleteButton)
                        .addGap(18, 18, 18)
                        .addComponent(ClearButton)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TRTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ENTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FRTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DETextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseImageButton)
                    .addComponent(imagePreviewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(UpdateButton)
                    .addComponent(DeleteButton)
                    .addComponent(ClearButton))
                .addContainerGap())
        );

        WordSettingsTable.setRowHeight(120);
        WordSettingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TR", "EN", "FR", "DE", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, javax.swing.ImageIcon.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        WordSettingsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WordSettingsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(WordSettingsTable);
        if (WordSettingsTable.getColumnModel().getColumnCount() > 0) {
            WordSettingsTable.getColumnModel().getColumn(0).setResizable(false);
            WordSettingsTable.getColumnModel().getColumn(1).setResizable(false);
            WordSettingsTable.getColumnModel().getColumn(2).setResizable(false);
            WordSettingsTable.getColumnModel().getColumn(3).setResizable(false);
            WordSettingsTable.getColumnModel().getColumn(4).setResizable(false);
        }

        messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        messageWordSettingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        getDataFromExcelButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        getDataFromExcelButton.setText("GET DATA FROM EXCEL");
        getDataFromExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDataFromExcelButtonActionPerformed(evt);
            }
        });

        importDataToExcelButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        importDataToExcelButton.setText("IMPORT DATA TO EXCEL");
        importDataToExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDataToExcelButtonActionPerformed(evt);
            }
        });

        jButton_getFirst.setText("Ä°lk");
        jButton_getFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_getFirstActionPerformed(evt);
            }
        });

        jButton_previous.setText("Ãnceki");
        jButton_previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_previousActionPerformed(evt);
            }
        });

        jButton_nextTo.setText("Sonraki");
        jButton_nextTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_nextToActionPerformed(evt);
            }
        });

        jButton_last.setText("Son");
        jButton_last.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_lastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(messageWordSettingsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(getDataFromExcelButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(importDataToExcelButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton_getFirst, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton_nextTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton_previous, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton_last, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(getDataFromExcelButton)
                        .addGap(18, 18, 18)
                        .addComponent(importDataToExcelButton)
                        .addGap(51, 51, 51)
                        .addComponent(messageWordSettingsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_getFirst)
                            .addComponent(jButton_last))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton_nextTo)
                            .addComponent(jButton_previous)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Word Settings", jPanel2);

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        languageComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TR", "EN", "FR", "DE" }));

        setLanguageButton.setText("SET LANGUAGE");
        setLanguageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLanguageButtonActionPerformed(evt);
            }
        });

        appLanguageLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        appLanguageLabel.setText("Uygulama dili");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(273, 273, 273)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(languageComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setLanguageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(appLanguageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appLanguageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setLanguageButton)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        AppColorTextLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        AppColorTextLabel.setText("Uygulama dili");

        setColorButton.setText("SET COLOR");
        setColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setColorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AppColorTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jColorChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(setColorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AppColorTextLabel)
                .addGap(18, 18, 18)
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(setColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Created by Nejdet Kadir BektaÅ. All rights reserved | 2020");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addContainerGap())
        );

        jTabbedPane1.addTab("User Settings", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<>(mainTB);
        mainTable.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter(searchTextField.getText().toString()));
    }//GEN-LAST:event_searchTextFieldKeyReleased

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        if (!checkSettingsInput()) {
            String query = "INSERT INTO WORD(TR,EN,FR,DE,IMAGE) VALUES(?,?,?,?,?)";
            try {
                Connection connection = DriverManager.getConnection(url, user, password);
                FileInputStream fileInputStream = new FileInputStream(file);
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                preparedStatement.setString(1, TRTextField.getText().toString());
                preparedStatement.setString(2, ENTextField.getText().toString());
                preparedStatement.setString(3, FRTextField.getText().toString());
                preparedStatement.setString(4, DETextField.getText().toString());
                preparedStatement.setBinaryStream(5, fileInputStream, (int)file.length());
                preparedStatement.executeUpdate();
                preparedStatement.close(); 
                fileInputStream.close(); 
                connection.close();
                setWordSettingsDataToTable();
                messageWordSettingsLabel.setText(add_success_message);
                getAndSetData(searchForLanguageComboBox.getSelectedItem().toString());
                setEmptyInput();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.toString());
                messageWordSettingsLabel.setText(add_error_message);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                messageWordSettingsLabel.setText(add_error_message);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                messageWordSettingsLabel.setText(add_error_message);
            }
        }
    }//GEN-LAST:event_AddButtonActionPerformed

    private void searchForLanguageComboBoxÄ°temStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchForLanguageComboBoxÄ°temStateChanged
        selected_lang = searchForLanguageComboBox.getSelectedItem().toString();
        getAndSetData(selected_lang);        
    }//GEN-LAST:event_searchForLanguageComboBoxÄ°temStateChanged

    private void WordSettingsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WordSettingsTableMouseClicked
        selected_row = WordSettingsTable.getSelectedRows();
        if (selected_row.length > 1) {
            JOptionPane.showMessageDialog(this, "Tek seferde en fazla 1 adet satÄ±r seÃ§ilebilir!");
            WordSettingsTable.setRowSelectionInterval(selected_row[0], selected_row[0]);
            TRTextField.setText(wordArrayList.get(selected_row[0]).getTr());
            ENTextField.setText(wordArrayList.get(selected_row[0]).getEn());
            FRTextField.setText(wordArrayList.get(selected_row[0]).getFr());
            DETextField.setText(wordArrayList.get(selected_row[0]).getDe());
            imagePreviewLabel.setText("");
            update_file_status = false;
            imagePreviewLabel.setIcon(wordArrayList.get(selected_row[0]).getImageIcon());
        } else if (selected_row.length == 1) {
            TRTextField.setText(wordArrayList.get(selected_row[0]).getTr());
            ENTextField.setText(wordArrayList.get(selected_row[0]).getEn());
            FRTextField.setText(wordArrayList.get(selected_row[0]).getFr());
            DETextField.setText(wordArrayList.get(selected_row[0]).getDe());
            imagePreviewLabel.setText("");
            imagePreviewLabel.setIcon(wordArrayList.get(selected_row[0]).getImageIcon());
            update_file_status = false;
        }
        messageWordSettingsLabel.setText("");
    }//GEN-LAST:event_WordSettingsTableMouseClicked

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        int selected_row_single = WordSettingsTable.getSelectedRow();
        if (selected_row_single == -1) {
            messageWordSettingsLabel.setText(must_select_row_message);
        } else if (!checkSettingsInput()) {
            
            
            
            if (update_file_status) {
                String query = "UPDATE WORD SET TR = ?, EN = ?, FR = ?, DE = ?, IMAGE = ? WHERE ID = ?";
                try {
                    Connection connection = DriverManager.getConnection(url, user, password);
                    FileInputStream fileInputStream = new FileInputStream(file);
                    PreparedStatement preparedStatement = connection.prepareStatement(query);
                    preparedStatement.setString(1, TRTextField.getText().toString());
                    preparedStatement.setString(2, ENTextField.getText().toString());
                    preparedStatement.setString(3, FRTextField.getText().toString());
                    preparedStatement.setString(4, DETextField.getText().toString());
                    preparedStatement.setBinaryStream(5, fileInputStream, (int)file.length());
                    preparedStatement.setInt(6, wordArrayList.get(selected_row[0]).getId());
                    preparedStatement.executeUpdate();
                    preparedStatement.close(); 
                    fileInputStream.close(); 
                    connection.close();
                    setWordSettingsDataToTable();
                    messageWordSettingsLabel.setText(update_success_message);
                    getAndSetData(searchForLanguageComboBox.getSelectedItem().toString());
                    setEmptyInput();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.toString());
                    messageWordSettingsLabel.setText(update_error_message);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    messageWordSettingsLabel.setText(update_error_message);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    messageWordSettingsLabel.setText(update_error_message);
                }
                
            } else {
                String query = "UPDATE WORD SET TR = ?, EN = ?, FR = ?, DE = ? WHERE ID = ?";
                try {
                    Connection connection = DriverManager.getConnection(url, user, password);
                    PreparedStatement preparedStatement = connection.prepareStatement(query);
                    preparedStatement.setString(1, TRTextField.getText().toString());
                    preparedStatement.setString(2, ENTextField.getText().toString());
                    preparedStatement.setString(3, FRTextField.getText().toString());
                    preparedStatement.setString(4, DETextField.getText().toString());
                    preparedStatement.setInt(5, wordArrayList.get(selected_row[0]).getId());
                    preparedStatement.executeUpdate();
                    preparedStatement.close(); 
                    connection.close();
                    setWordSettingsDataToTable();
                    messageWordSettingsLabel.setText(update_success_message);
                    getAndSetData(searchForLanguageComboBox.getSelectedItem().toString());
                    setEmptyInput();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.toString());
                    messageWordSettingsLabel.setText(update_error_message);
                }
            }            
        }
        
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
         int selected_row_single = WordSettingsTable.getSelectedRow();
        if (selected_row_single == -1) {
            messageWordSettingsLabel.setText(must_select_row_message);
        } else if (!checkSettingsInput()) {
            String query = "DELETE FROM WORD WHERE ID = " + wordArrayList.get(selected_row[0]).getId();
            try {
                Connection connection = DriverManager.getConnection(url, user, password);
                Statement statement = connection.createStatement();
                statement.executeUpdate(query);
                connection.close();
                setWordSettingsDataToTable();
                messageWordSettingsLabel.setText(delete_success_message);
                getAndSetData(searchForLanguageComboBox.getSelectedItem().toString());
                setEmptyInput();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.toString());
                messageWordSettingsLabel.setText(delete_error_message);
            }       
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void chooseImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImageButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int status = chooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile();
            imageName = file.getName();
            imageURL = file.getPath();
            System.out.println(imageURL);
            ImageIcon imageIcon = new ImageIcon(new ImageIcon(imageURL).getImage().getScaledInstance(
                100, 100, java.awt.Image.SCALE_SMOOTH));
            imagePreviewLabel.setText("");
            imagePreviewLabel.setIcon(imageIcon);
            update_file_status = true;
        } else {
          messageWordSettingsLabel.setText(must_select_image);
        }
    }//GEN-LAST:event_chooseImageButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        setEmptyInput();
        setWordSettingsDataToTable();
        messageWordSettingsLabel.setText("");
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void setLanguageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLanguageButtonActionPerformed
        String lang = languageComboBox.getSelectedItem().toString();
        lang = lang.toLowerCase();
        String query = "UPDATE SETTINGS SET "
        + "LANGUAGE = '" + lang + "' "
        + "WHERE id = 0";
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();
            statement.executeLargeUpdate(query);
            connection.close();
            setLanguage();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }
    }//GEN-LAST:event_setLanguageButtonActionPerformed

    private void setColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setColorButtonActionPerformed
        Color color = jColorChooser1.getColor();
        jPanel1.setBackground(color);
        jPanel2.setBackground(color);
        jPanel3.setBackground(color);
        this.getContentPane().setBackground(color);        
        String query = "UPDATE SETTINGS SET STYLE = ? WHERE ID = 0";
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, color.toString());
            preparedStatement.executeUpdate();
            preparedStatement.close(); 
            connection.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }
    }//GEN-LAST:event_setColorButtonActionPerformed

    private void getDataFromExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDataFromExcelButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int status = chooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile();
            String fileURL = file.getPath();
            ArrayList<String> TrarrayList = new ArrayList<>();
            ArrayList<String> EnarrayList = new ArrayList<>();
            ArrayList<String> FrarrayList = new ArrayList<>();
            ArrayList<String> DearrayList = new ArrayList<>();
            try {
                FileInputStream file = new FileInputStream(new File(fileURL));
                Workbook workbook = new XSSFWorkbook(file);
                Sheet datatypeSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = datatypeSheet.iterator();
                while (iterator.hasNext()) {
                    Row currentRow = iterator.next();
                    Iterator<Cell> cellIterator = currentRow.iterator();
                    int row = 0;
                    while (cellIterator.hasNext()) {
                        Cell currentCell = cellIterator.next();  
                        switch (row) {
                            case 0:
                                TrarrayList.add(currentCell.getStringCellValue());
                                break;                            
                            case 1:
                                EnarrayList.add(currentCell.getStringCellValue());
                                break;
                            case 2:
                                FrarrayList.add(currentCell.getStringCellValue());
                                break;
                            case 3:
                                DearrayList.add(currentCell.getStringCellValue());
                                break;
                        }
                        row++;
                    }
                }
            } catch (FileNotFoundException ex) { 
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }        
            for (int i = 1; i < TrarrayList.size(); i++) {
                String query = "INSERT INTO WORD(TR,EN,FR,DE,IMAGE) VALUES(?,?,?,?,?)";
                try {
                    Connection connection = DriverManager.getConnection("jdbc:derby://localhost:1527/dictionary", "root", "5313235157");
                    File file = new File(System.getProperty("user.dir")+"\\src\\none.jpg");
                    System.out.println(file.getPath());
                    FileInputStream fileInputStream = new FileInputStream(file);
                    PreparedStatement preparedStatement = connection.prepareStatement(query);
                    preparedStatement.setString(1, TrarrayList.get(i));
                    preparedStatement.setString(2, EnarrayList.get(i));
                    preparedStatement.setString(3, FrarrayList.get(i));
                    preparedStatement.setString(4, DearrayList.get(i));
                    preparedStatement.setBinaryStream(5, fileInputStream, (int)file.length());
                    preparedStatement.executeUpdate();
                    preparedStatement.close(); 
                    fileInputStream.close(); 
                    connection.close();                
                    System.out.println("Eklendi");
                    messageWordSettingsLabel.setText(import_xml_success);
                } catch (SQLException ex) {
                    System.out.println("Hata");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("dosya yok");
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("hata");
                }        
            }            
        }
    }//GEN-LAST:event_getDataFromExcelButtonActionPerformed

    private void importDataToExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importDataToExcelButtonActionPerformed
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Ãrnek 1");
        Object[][] words = null;        
        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery("SELECT * FROM WORD");
            ArrayList<Word> wordArrayList = new ArrayList<>();
            while (result.next()) {
                wordArrayList.add(new Word(result.getInt("ID"),
                                        result.getString("TR"), 
                                        result.getString("EN"),
                                        result.getString("FR"),
                                        result.getString("DE"),
                                        null
                                        ));
            }
            
           words = new Object[(wordArrayList.size()+1)][4];
            int index = 1;
            words[0][0] = "TR";
            words[0][1] = "EN";
            words[0][2] = "FR";
            words[0][3] = "DE";
            for (Word object: wordArrayList) {
                words[index][0] = object. getTr();
                words[index][1] = object. getEn();
                words[index][2] = object. getFr();
                words[index][3] = object. getDe();
                index++;
            }            
            for (Object[] datatype : words) {                
                System.out.println(datatype[2]);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        int rowNum = 0;
        for (Object[] datatype : words) {
            Row row = sheet.createRow(rowNum++);
            int colNum = 0;
            for (Object field : datatype) {
                Cell cell = row.createCell(colNum++);
                if (field instanceof String) {
                    cell.setCellValue((String) field);
                } else if (field instanceof Integer) {
                    cell.setCellValue((Integer) field);
                }
            }
        }        
        try {
            FileOutputStream outputStream = new FileOutputStream(System.getProperty("user.dir")+"\\src\\data.xlsx");
            workbook.write(outputStream);
            workbook.close();
            messageWordSettingsLabel.setText(created_xml_success);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_importDataToExcelButtonActionPerformed

    private void jButton_getFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_getFirstActionPerformed
        if (WordSettingsTable.getRowCount() > 0) {
            WordSettingsTable.setRowSelectionInterval(0, 0);
            setData(0);            
        }
    }//GEN-LAST:event_jButton_getFirstActionPerformed

    private void jButton_lastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_lastActionPerformed
        if (WordSettingsTable.getRowCount() > 0) {
            WordSettingsTable.setRowSelectionInterval(WordSettingsTable.getRowCount()-1, WordSettingsTable.getRowCount()-1);
            selected_row = new int[2];
            selected_row[0] = WordSettingsTable.getRowCount()-1;
            setData(WordSettingsTable.getRowCount()-1);
        }
        
    }//GEN-LAST:event_jButton_lastActionPerformed

    private void jButton_nextToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_nextToActionPerformed
        if (selected_row.length == 0 && WordSettingsTable.getRowCount() > 0) {
            WordSettingsTable.setRowSelectionInterval(0, 0);
            selected_row = new int[2];
            selected_row[0] = 0;
            setData(selected_row[0]);
        } else {
            selected_row[0]++;
            if (!(selected_row[0] > WordSettingsTable.getRowCount()-1)) {
                WordSettingsTable.setRowSelectionInterval(selected_row[0], selected_row[0]);
                setData(selected_row[0]);
            } 
        }
    }//GEN-LAST:event_jButton_nextToActionPerformed

    private void jButton_previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_previousActionPerformed
        if (!(selected_row[0] <= 0)) {
            selected_row[0]--;
            WordSettingsTable.setRowSelectionInterval(selected_row[0], selected_row[0]);
            setData(selected_row[0]);
         }
        
    }//GEN-LAST:event_jButton_previousActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    //My Methods
    
    public void setData(int row) {
        if (WordSettingsTable.getRowCount() > 0) {
            TRTextField.setText(wordArrayList.get(row).getTr());
            ENTextField.setText(wordArrayList.get(row).getEn());
            FRTextField.setText(wordArrayList.get(row).getFr());
            DETextField.setText(wordArrayList.get(row).getDe());
            imagePreviewLabel.setText("");
            imagePreviewLabel.setIcon(wordArrayList.get(row).getImageIcon());
            update_file_status = false;
        }        
    }
    
    
    void setWordSettingsDataToTable() {
        wordSettingsTM.setRowCount(0);
        wordArrayList = new ArrayList<>();
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery("SELECT * FROM WORD");
            while (result.next()) {
                wordArrayList.add(new Word(result.getInt("ID"),
                                        result.getString("TR"), 
                                        result.getString("EN"),
                                        result.getString("FR"),
                                        result.getString("DE"),
                                        result.getBytes("IMAGE")
                                        ));
            }
            connection.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }        
        for (Word object : wordArrayList) {
            Object[] row = {object.getTr(), object.getEn(), object.getFr(), object.getDe(), object.getImageIcon()};
            wordSettingsTM.addRow(row);
            System.out.println("'" + object.getImage() + "'");
        }
    }
    
    boolean checkSettingsInput() {
        if (TRTextField.getText().toString().trim().equals("")) {
            messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
            messageWordSettingsLabel.setText(tr_input_empty);
            return true;
        } else if (TRTextField.getText().toString().trim().length() < 2) {
            messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
            messageWordSettingsLabel.setText(tr_input_size);
            return true;
        } else if (ENTextField.getText().toString().trim().equals("")) {
            messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 10));
            messageWordSettingsLabel.setText(en_input_empty);
            return true;
        } else if (ENTextField.getText().toString().trim().length() < 2) {
            messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
            messageWordSettingsLabel.setText(en_input_size);
            return true;
        } else if (FRTextField.getText().toString().trim().equals("")) {
            messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 10));
            messageWordSettingsLabel.setText(fr_input_empty);
            return true;
        } else if (FRTextField.getText().toString().trim().length() < 2) {
            messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
            messageWordSettingsLabel.setText(fr_input_size);
            return true;
        } else if (DETextField.getText().toString().trim().equals("")) {
            messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 10));
            messageWordSettingsLabel.setText(de_input_empty);
            return true;
        } else if (DETextField.getText().toString().trim().length() < 2) {
            messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
            messageWordSettingsLabel.setText(de_input_size);
            return true;
        } else if (imagePreviewLabel.getText().toString().equals(image_label_text)) {
            messageWordSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
            messageWordSettingsLabel.setText(must_select_image);
            return true;
        }
        return false;
    }
    
    void setLanguage() {
        String language = "";
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery("SELECT * FROM SETTINGS WHERE ID = 0");
            while (result.next()) {
                language = result.getString("LANGUAGE");
            }
            connection.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }
        
        if (language.equals("tr")) {
            tr_input_empty = "LÃ¼tfen TÃ¼rkÃ§e kelime giriniz!";
            tr_input_size = "TÃ¼rkÃ§e kelime en az 2 karakter olmalÄ±dÄ±r.";
            en_input_empty = "LÃ¼tfen Ä°ngilizce kelime giriniz!";
            en_input_size = "Ä°ngilizce kelime en az 2 karakter olmalÄ±dÄ±r.";
            fr_input_empty = "LÃ¼tfen FransÄ±zca kelime giriniz!";
            fr_input_size = "FransÄ±zca kelime en az 2 karakter olmalÄ±dÄ±r.";
            de_input_empty = "LÃ¼tfen Almanca kelime giriniz!";
            de_input_size = "Almanca kelime en az 2 karakter olmalÄ±dÄ±r.";
            jLabel1.setText("Ara");
            jTabbedPane1.setTitleAt(0, "SÃZLÃK");
            AddButton.setText("EKLE");
            UpdateButton.setText("GÃNCELLE");
            DeleteButton.setText("SÄ°L");
            jTabbedPane1.setTitleAt(1, "KELÄ°ME AYARLARI");
            jTabbedPane1.setTitleAt(2, "KULLANICI AYARLARI");
            jLabel3.setText("Ä°ngilizce Kelime ");
            jLabel5.setText("FransÄ±zca Kelime ");
            jLabel6.setText("Almanca Kelime ");
            jLabel2.setText("TÃ¼rkÃ§e Kelime ");
            importDataToExcelButton.setText("EXCEL'E AKTAR");
            getDataFromExcelButton.setText("EXCEL'DEN AKTAR");
            add_error_message = "Kelime eklenirken hata oluÅtu";
            add_success_message = "Kelime baÅarÄ±yla eklendi";
            update_error_message = "Kelime gÃ¼ncellenirken hata oluÅtu";
            update_success_message = "Kelime baÅarÄ±yla gÃ¼ncellendi";
            delete_error_message = "Kelime silinirken hata oluÅtu";
            delete_success_message = "Kelime baÅarÄ±yla silindi";
            languageComboBox.setSelectedItem("TR");
            setLanguageButton.setText("Dili Ayarla");
            must_select_row_message = "Ä°Ålem yapmak istediÄiniz satÄ±rÄ± seÃ§iniz";
            must_select_image = "LÃ¼tfen bir resim seÃ§iniz";
            image_label_text = "FotoÄraf";
            ClearButton.setText("TEMÄ°ZLE");
            chooseImageButton.setText("Resim SeÃ§");
            created_xml_success = "'src/data.xlsx' dizinine kaydedildi";
            import_xml_success = "Ekleme baÅarÄ±lÄ±";
            appLanguageLabel.setText("Uygulama Dili");
            setColorButton.setText("Rengi Uygula");
            AppColorTextLabel.setText("Uygulama Rengi");
        } else if (language.equals("en")) {
            tr_input_empty = "Please enter Turkish word!";
            tr_input_size = "Turkish word must to have 2 characters as minimum.";
            en_input_empty = "Please enter English word!";
            en_input_size = "Enlish word must to have 2 characters as minimum.";
            fr_input_empty = "Please enter French word!";
            fr_input_size = "French word must to have 2 characters as minimum.";
            de_input_empty = "Please enter Deutsch word!";
            de_input_size = "Deutsch word must to have 2 characters as minimum.";
            jLabel1.setText("Search");
            jTabbedPane1.setTitleAt(0, "DICTIONARY");
            AddButton.setText("ADD");
            UpdateButton.setText("UPDATE");
            DeleteButton.setText("DELETE");
            jTabbedPane1.setTitleAt(1, "WORD SETTINGS");
            jTabbedPane1.setTitleAt(2, "USER SETTINGS");
            jLabel3.setText("English Word ");
            jLabel5.setText("French Word ");
            jLabel6.setText("Deutsch Word ");
            jLabel2.setText("Turkish Word ");
            importDataToExcelButton.setText("IMPORT TO EXCEL");
            getDataFromExcelButton.setText("GET FROM EXCEL");
            add_error_message = "Word not created was successfully";
            add_success_message = "Word created was successfully";
            update_error_message = "Word not updated was successfully";
            update_success_message = "Word updated was successfully";
            delete_error_message = "Word not deleted was successfully";
            delete_success_message = "Word deleted was successfully";
            languageComboBox.setSelectedItem("EN");
            setLanguageButton.setText("Set Language");
            must_select_row_message = "You must select a word for proccess";
            image_label_text = "Image";
            ClearButton.setText("CLEAR");
            chooseImageButton.setText("Choose an image");
            created_xml_success = "Saved to 'src/data.xlsx'";
            import_xml_success = "Import was successfully";
            appLanguageLabel.setText("Application Language");
            setColorButton.setText("Set Color");
            AppColorTextLabel.setText("Application Color");
        } else if (language.equals("fr")) {
            tr_input_empty = "Veuillez saisir le mot turc!";
            tr_input_size = "Le mot turc doit avoir au moins 2 caractÃ¨res.";
            en_input_empty = "Veuillez saisir le mot anglais!";
            en_input_size = "Le mot anglais doit avoir au moins 2 caractÃ¨res.";
            fr_input_empty = "Veuillez saisir le mot franÃ§ais!";
            fr_input_size = "Le mot franÃ§ais doit avoir au moins 2 caractÃ¨res.";
            de_input_empty = "Veuillez saisir le mot Deutsch!";
            de_input_size = "Le mot Deutsch doit avoir au moins 2 caractÃ¨res.";
            jLabel1.setText("Chercher");
            jTabbedPane1.setTitleAt(0, "DICTIONNAIRE");
            AddButton.setText("AJOUTER");
            UpdateButton.setText("MISE Ã JOUR");
            DeleteButton.setText("SUPPRIMER");
            jTabbedPane1.setTitleAt(1, "PARAMÃTRES DES MOTS");
            jTabbedPane1.setTitleAt(2, "PARAMÃTRES UTILISATEUR");
            jLabel3.setText("Mot anglais ");
            jLabel5.setText("Mot franÃ§ais ");
            jLabel6.setText("mot allemand ");
            jLabel2.setText("Mot turc ");
            importDataToExcelButton.setText("IMPORTATION DE DONNÃES Ã EXCEL");
            getDataFromExcelButton.setText("OBTENIR DES DONNÃES D'EXCEL");
            add_error_message = "Le mot non crÃ©Ã© a bien Ã©tÃ©";
            add_success_message = "Le mot crÃ©Ã© a Ã©tÃ© correctement";
            update_error_message = "Le mot non mis Ã  jour a rÃ©ussi";
            update_success_message = "La mise Ã  jour de Word a rÃ©ussi";
            delete_error_message = "Le mot non supprimÃ© a bien Ã©tÃ©";
            delete_success_message = "Le mot supprimÃ© a bien Ã©tÃ©";
            languageComboBox.setSelectedItem("FR");
            setLanguageButton.setText("DÃ©finir la langue");
            must_select_row_message = "Vous devez sÃ©lectionner un mot pour proccess";
            image_label_text = "Image";
            ClearButton.setText("NETTE");
            chooseImageButton.setText("Choisissez une image");
            created_xml_success = "EnregistrÃ© dans 'src / data.xlsx'";
            import_xml_success = "L'importation a rÃ©ussi";
            appLanguageLabel.setText("langue d'application");
            setColorButton.setText("DÃ©finir la couleur");
            AppColorTextLabel.setText("Couleur d'application");
        } else {
            tr_input_empty = "Bitte geben Sie ein tÃ¼rkisches Wort ein!";
            tr_input_size = "Das tÃ¼rkische Wort muss mindestens 2 Zeichen enthalten.";
            en_input_empty = "Bitte geben Sie ein englisches Wort ein!";
            en_input_size = "Das englische Wort muss mindestens 2 Zeichen enthalten.";
            fr_input_empty = "Bitte geben Sie das franzÃ¶sische Wort ein!";
            fr_input_size = "Das franzÃ¶sische Wort muss mindestens 2 Zeichen enthalten.";
            de_input_empty = "Bitte geben Sie Deutsch ein!";
            de_input_size = "Deutsches Wort muss mindestens 2 Zeichen haben.";
            jLabel1.setText("Suche");
            jTabbedPane1.setTitleAt(0, "WÃRTERBUCH");
            AddButton.setText("HINZUFÃGEN");
            UpdateButton.setText("AKTUALISIEREN");
            DeleteButton.setText("LÃSCHEN");
            jTabbedPane1.setTitleAt(1, "WORT-EINSTELLUNGEN");
            jTabbedPane1.setTitleAt(2, "BENUTZEREINSTELLUNGEN");
            jLabel3.setText("Englisches Wort ");
            jLabel5.setText("FranzÃ¶sisches Wort ");
            jLabel6.setText("Deutsches Wort ");
            jLabel2.setText("TÃ¼rkisches Wort ");
            importDataToExcelButton.setText("IMPORT ZU EXCEL");
            getDataFromExcelButton.setText("ERHALTEN SIE VON EXCEL");
            add_error_message = "Wort nicht erstellt wurde erfolgreich";
            add_success_message = "Word erstellt wurde erfolgreich";
            update_error_message = "Word nicht aktualisiert wurde erfolgreich";
            update_success_message = "Word aktualisiert wurde erfolgreich";
            delete_error_message = "Wort nicht gelÃ¶scht wurde erfolgreich";
            delete_success_message = "Wort gelÃ¶scht wurde erfolgreich";
            languageComboBox.setSelectedItem("DE");
            setLanguageButton.setText("Sprache einstellen");
            must_select_row_message = "Sie mÃ¼ssen ein Wort fÃ¼r den Prozess auswÃ¤hlen";
            image_label_text = "Bild";
            ClearButton.setText("KLAR");
            chooseImageButton.setText("WÃ¤hlen Sie ein Bild");
            created_xml_success = "In 'src / data.xlsx' gespeichert";
            import_xml_success = "Der Import war erfolgreich";
            appLanguageLabel.setText("Anwendungssprache");
            setColorButton.setText("Farbe einstellen");
            AppColorTextLabel.setText("Anwendungsfarbe");
        }
    }
    
    void setEmptyInput() {
        TRTextField.setText("");
        ENTextField.setText("");
        FRTextField.setText("");
        DETextField.setText("");
        imagePreviewLabel.setIcon(null);
        imagePreviewLabel.setText(image_label_text);
        update_file_status = false;
    }
    
    void getAndSetData(String lang) {
        mainTB.setRowCount(0);
        ArrayList<Word> wordsArray = new ArrayList<>();
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery("SELECT * FROM WORD");
            while (result.next()) {
                wordsArray.add(new Word(result.getInt("ID"),
                                        result.getString("TR"), 
                                        result.getString("EN"),
                                        result.getString("FR"),
                                        result.getString("DE"),
                                        result.getBytes("IMAGE")));
            }
            connection.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }    
        JTableHeader header= mainTable.getTableHeader();
        TableColumnModel colMod = header.getColumnModel();
        TableColumn tabCol = colMod.getColumn(1);                
        if (lang.equals("EN")) {
            for (Word object : wordsArray) {
                Object[] row = {object.getTr(), object.getEn(), object.getImageIcon()};
                mainTB.addRow(row);
            }            
        } else if (lang.equals("FR")) {
            for (Word object : wordsArray) {
                Object[] row = {object.getTr(), object.getFr(), object.getImageIcon()};
                mainTB.addRow(row);
            } 
        } else {
            for (Word object : wordsArray) {
                Object[] row = {object.getTr(), object.getDe(), object.getImageIcon()};
                mainTB.addRow(row);
            }  
        }
            
        tabCol.setHeaderValue(lang);
        header.repaint();    
        
    }
    
    void setColor() {
        String colorString ="";
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery("SELECT * FROM SETTINGS WHERE ID = 0");
            while (result.next()) {
                colorString = result.getString("STYLE");
            }
            connection.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }
        String[] a = colorString.split("Color")[1].substring(1, colorString.split("Color")[1].length()-1).split(",");
        System.out.println(a[0].split("=")[1]);        
        Color color = new Color(Integer.parseInt(a[0].split("=")[1]), Integer.parseInt(a[1].split("=")[1]), Integer.parseInt(a[2].split("=")[1]));
        jPanel1.setBackground(color);
        jPanel2.setBackground(color);
        jPanel3.setBackground(color);
        this.getContentPane().setBackground(color);  
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JLabel AppColorTextLabel;
    private javax.swing.JButton ClearButton;
    private javax.swing.JTextField DETextField;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTextField ENTextField;
    private javax.swing.JTextField FRTextField;
    private javax.swing.JTextField TRTextField;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JTable WordSettingsTable;
    private javax.swing.JLabel appLanguageLabel;
    private javax.swing.JButton chooseImageButton;
    private javax.swing.JButton getDataFromExcelButton;
    private javax.swing.JLabel imagePreviewLabel;
    private javax.swing.JButton importDataToExcelButton;
    private javax.swing.JButton jButton_getFirst;
    private javax.swing.JButton jButton_last;
    private javax.swing.JButton jButton_nextTo;
    private javax.swing.JButton jButton_previous;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> languageComboBox;
    private javax.swing.JTable mainTable;
    private javax.swing.JLabel messageWordSettingsLabel;
    private javax.swing.JComboBox<String> searchForLanguageComboBox;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton setColorButton;
    private javax.swing.JButton setLanguageButton;
    // End of variables declaration//GEN-END:variables
}
